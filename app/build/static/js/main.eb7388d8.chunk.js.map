{"version":3,"sources":["cam/cam.module.css","WebAssembly_Logo.svg","cam/cam.ts","cam/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","Cam","canvas","video","sobelButton","boxBlurButton","sharpenButton","embossButton","laplacianButton","current","ctx","wasm","pointer","lastTime","Infinity","ticks","effect","workers","addEventListener","then","native","navigator","mediaDevices","getUserMedia","camLoaded","catch","console","log","drawToCanvas","time","document","querySelector","innerHTML","toFixed","drawFps","width","videoWidth","height","videoHeight","byteSize","alloc","requestAnimationFrame","allocateMemory","drawImage","b1","b2","imageData","getImageData","data","buffer","memory","Uint8Array","byteLength","set","sobel","box_blur","sharpen","emboss","laplacian","Uint8ClampedArray","imageDataUpdated","ImageData","putImageData","workerMesageRecieved","e","stream","getContext","srcObject","i","hardwareConcurrency","worker","Worker","onmessage","postMessage","push","Date","getTime","createWorkers","useRef","useEffect","cam","className","css","flex","sideDiv","buttonList","ref","hide","autoPlay","App","src","logo","alt","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eb7388d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"cam_hide__3ykpy\",\"flex\":\"cam_flex__2nGjf\",\"sideDiv\":\"cam_sideDiv__2z-E5\",\"buttonList\":\"cam_buttonList__28TZE\"};","export default __webpack_public_path__ + \"static/media/WebAssembly_Logo.1381587b.svg\";","import React from \"react\";\r\n\r\ninterface Wasm  {\r\n    memory: {\r\n        buffer: SharedArrayBuffer\r\n    }\r\n    alloc(bytes: number): number\r\n    sobel(pointer: number, width: number, height: number): void\r\n    box_blur(pointer: number, width: number, height: number): void\r\n    sharpen(pointer: number, width: number, height: number): void\r\n    emboss(pointer: number, width: number, height: number): void\r\n    laplacian(pointer: number, width: number, height: number): void\r\n}\r\n\r\nexport default function Cam(\r\n    canvas: React.RefObject<HTMLCanvasElement>,\r\n    video: React.RefObject<HTMLVideoElement>,\r\n    sobelButton: React.RefObject<HTMLButtonElement>,\r\n    boxBlurButton: React.RefObject<HTMLButtonElement>,\r\n    sharpenButton: React.RefObject<HTMLButtonElement>,\r\n    embossButton: React.RefObject<HTMLButtonElement>,\r\n    laplacianButton: React.RefObject<HTMLButtonElement>\r\n) {\r\n    if (canvas.current === null) return;\r\n    if (video.current === null) return;\r\n    if (sobelButton.current === null) return;\r\n    if (boxBlurButton.current === null) return;\r\n    if (sharpenButton.current === null) return;\r\n    if (embossButton.current === null) return;\r\n    if (laplacianButton.current === null) return;\r\n\r\n    let ctx: CanvasRenderingContext2D | null,\r\n        wasm: Wasm,\r\n        pointer = -1,\r\n        lastTime = Infinity,\r\n        ticks = 0,\r\n        effect = 0,\r\n        workers: Worker[] = [],\r\n        numJobs = 0;\r\n\r\n    function allocateMemory(width: number, height: number) {\r\n        if (!(video.current && canvas.current)) return;\r\n        canvas.current.width = width;\r\n        canvas.current.height = height;\r\n        const byteSize = width * height * 4;\r\n        pointer = wasm.alloc(byteSize);\r\n        return requestAnimationFrame(drawToCanvas)\r\n    }\r\n\r\n    function drawToCanvas(time: number) {\r\n        if (!(video.current && canvas.current)) return;\r\n        drawFps(time)\r\n        const width = video.current.videoWidth;\r\n        const height = video.current.videoHeight;\r\n        // do we need to allocate memory?\r\n        if (width > 0 && canvas.current && pointer === -1) return allocateMemory(width, height)\r\n        // draw webcam to canvas\r\n        ctx?.drawImage(video.current, 0, 0, width, height);\r\n        // do we have no effect selected? is the canvas ready?\r\n        if (effect === 0 || !(width > 0 && canvas.current && ctx)) return requestAnimationFrame(drawToCanvas)\r\n        // get image data from the canvas\r\n        const imageData = ctx.getImageData(0, 0, width, height);\r\n        memcopy(imageData.data.buffer, wasm.memory.buffer, pointer)\r\n        switch (effect) {\r\n            case 1:\r\n                wasm.sobel(pointer, width, height)\r\n                break;\r\n            case 2:\r\n                wasm.box_blur(pointer, width, height)\r\n                break;\r\n            case 3:\r\n                wasm.sharpen(pointer, width, height)\r\n                break;\r\n            case 4:\r\n                wasm.emboss(pointer, width, height)\r\n                break;\r\n            case 5:\r\n                wasm.laplacian(pointer, width, height)\r\n                break;\r\n        }\r\n        const data = new Uint8ClampedArray(wasm.memory.buffer, pointer, width * height * 4);\r\n        const imageDataUpdated = new ImageData(data, width, height);\r\n        ctx.putImageData(imageDataUpdated, 0, 0)\r\n\r\n        requestAnimationFrame(drawToCanvas)\r\n    }\r\n\r\n    function workerMesageRecieved(e: MessageEvent) {\r\n\r\n    }\r\n\r\n    function createWorkers() {\r\n        for (let i = 0; i < navigator.hardwareConcurrency; i++) {\r\n            const worker = new Worker(\"worker.js\");\r\n            worker.onmessage = workerMesageRecieved;\r\n            worker.postMessage({data: {}})\r\n            workers.push(worker);\r\n        }\r\n        drawToCanvas(new Date().getTime())\r\n    }\r\n\r\n    function camLoaded(stream: MediaStream) {\r\n        if (canvas.current !== null) {\r\n            ctx = canvas.current.getContext('2d');\r\n        }\r\n        if (video.current) {\r\n            video.current.srcObject = stream;\r\n        }\r\n        createWorkers();\r\n    }\r\n\r\n    function wasmLoaded(native: Wasm) {\r\n        wasm = native;\r\n        if (navigator.mediaDevices.getUserMedia) {\r\n            navigator.mediaDevices.getUserMedia({video: true})\r\n                .then(camLoaded)\r\n                .catch(function () {\r\n                    console.log(\"Something went wrong!\");\r\n                });\r\n        }\r\n    }\r\n\r\n    function memcopy(b1: ArrayBufferLike, b2: SharedArrayBuffer, offset: number) {\r\n        new Uint8Array(b2, offset, b1.byteLength).set(new Uint8Array(b1));\r\n    }\r\n\r\n    function drawFps(time: number) {\r\n        if (ticks % 5 === 0) {\r\n            //@ts-ignore\r\n            document.querySelector(\"#fps\").innerHTML = (1000 / (time - lastTime)).toFixed(2);\r\n        }\r\n        ticks += 1;\r\n        if (ticks > 5) ticks = 0;\r\n        lastTime = time;\r\n    }\r\n\r\n    sobelButton.current.addEventListener(\"click\", () => {\r\n        effect = effect === 1 ? 0 : 1\r\n    })\r\n\r\n    boxBlurButton.current.addEventListener(\"click\", () => {\r\n        effect = effect === 2 ? 0 : 2\r\n    })\r\n\r\n    sharpenButton.current.addEventListener(\"click\", () => {\r\n        effect = effect === 3 ? 0 : 3\r\n    })\r\n\r\n    embossButton.current.addEventListener(\"click\", () => {\r\n        effect = effect === 4 ? 0 : 4\r\n    })\r\n\r\n    laplacianButton.current.addEventListener(\"click\", () => {\r\n        effect = effect === 5 ? 0 : 5\r\n    })\r\n\r\n    //@ts-ignore\r\n    import('../wasm').then(wasmLoaded)\r\n}","import {useEffect, useRef} from \"react\";\nimport css from './cam.module.css'\nimport cam from './cam'\n\nfunction Cam() {\n    const canvas = useRef<HTMLCanvasElement>(null)\n    const video = useRef<HTMLVideoElement>(null)\n    const sobelButton = useRef<HTMLButtonElement>(null)\n    const boxBlurButton = useRef<HTMLButtonElement>(null)\n    const sharpenButton = useRef<HTMLButtonElement>(null)\n    const embossButton = useRef<HTMLButtonElement>(null)\n    const laplacianButton = useRef<HTMLButtonElement>(null)\n\n\n    useEffect(() => cam(canvas, video, sobelButton, boxBlurButton, sharpenButton, embossButton, laplacianButton),\n        [sobelButton, video, canvas])\n\n    return (\n        <div className={css.flex}>\n            <div className={css.sideDiv}>\n                <ul className={css.buttonList}>\n                    <li><button ref={sobelButton}>Sobel Edge Detection</button></li>\n                    <li><button ref={boxBlurButton}>Box Blur</button></li>\n                    <li><button ref={sharpenButton}>Sharpen</button></li>\n                    <li><button ref={embossButton}>Emboss</button></li>\n                    <li><button ref={laplacianButton}>Laplacian</button></li>\n                </ul>\n            </div>\n            <canvas ref={canvas} > </canvas>\n            <video className={css.hide} autoPlay={true} ref={video} />\n            <div className={css.sideDiv}></div>\n        </div>\n    );\n}\n\nexport default Cam;\n","import logo from './WebAssembly_Logo.svg';\nimport './App.css';\nimport Cam from \"./cam\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Cam effects with <code>wasm</code> and <code>rust</code> <span id={\"fps\"}></span>fps\n        </p>\n\n          <Cam />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}