{"version":3,"sources":["cam/cam.module.css","WebAssembly_Logo.svg","cam/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","Cam","canvas","useRef","video","useEffect","current","ctx","wasm","pointer","lastTime","Infinity","then","native","greet","navigator","mediaDevices","getUserMedia","stream","getContext","srcObject","drawToCanvas","Date","getTime","catch","err0r","console","log","time","width","videoWidth","height","videoHeight","drawImage","byteSize","alloc","imageData","getImageData","b1","data","buffer","b2","memory","Uint8Array","byteLength","set","sobel","Uint8ClampedArray","imageDataUpdated","ImageData","putImageData","fps","toFixed","requestAnimationFrame","ref","className","css","hide","autoPlay","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,KAAO,oB,wHCDV,G,MAAA,IAA0B,8C,wBC6F1BC,MA1Ff,WACI,IAAIC,EAASC,iBAA0B,MACnCC,EAAQD,iBAAyB,MAgFrC,OA7EAE,qBAAU,WACN,GAAe,OAAXH,GACkB,OAAlBE,EAAME,QAAV,CAEA,IAAIC,EAEAC,EACAC,GAAW,EACXC,EAAWC,IAyCf,6BACKC,MAAK,SAAAC,GACFL,EAAOK,EAEPA,EAAOC,QAEHC,UAAUC,aAAaC,cACvBF,UAAUC,aAAaC,aAAa,CAAEb,OAAO,IACxCQ,MAAK,SAAUM,GACW,OAAnBhB,EAAOI,UACPC,EAAML,EAAOI,QAAQa,WAAW,OAEhCf,EAAME,UACNF,EAAME,QAAQc,UAAYF,GAG9BG,GAAa,IAAIC,MAAOC,cAE3BC,OAAM,SAAUC,GACbC,QAAQC,IAAI,+BAtDhC,SAASN,EAAaO,GAClB,GAAIxB,EAAME,SAAWJ,EAAOI,QAAS,CAAC,IAAD,EAC3BuB,EAAQzB,EAAME,QAAQwB,WACtBC,EAAS3B,EAAME,QAAQ0B,YAM7B,GALA9B,EAAOI,QAAQuB,MAAQA,EACvB3B,EAAOI,QAAQyB,OAASA,EAErB,QAAH,EAAAxB,SAAA,SAAK0B,UAAU7B,EAAME,QAAS,EAAG,EAAGuB,EAAOE,GAEvC7B,EAAOI,QAAQuB,MAAQ,EACvB,GAAI3B,EAAOI,UAAwB,IAAbG,EAAgB,CAClCP,EAAOI,QAAQuB,MAAQA,EACvB3B,EAAOI,QAAQyB,OAASA,EACxB,IAAMG,EAAWL,EAAQE,EAAS,EAElCtB,EAAUD,EAAK2B,MAAMD,QAClB,GAAIhC,EAAOI,SAAWC,EAAK,CAC9B,IAAI6B,EAAY7B,EAAI8B,aAAa,EAAG,EAAGR,EAAOE,GArB7CO,EAuBOF,EAAUG,KAAKC,OAvBDC,EAuBSjC,EAAKkC,OAAOF,OAtBvD,IAAIG,WAAWF,EAsBgDhC,EAtBpC6B,EAAGM,YAAYC,IAAI,IAAIF,WAAWL,IAwBjD9B,EAAKsC,MAAMrC,EAASoB,EAAOE,GAE3B,IAAMQ,EAAO,IAAIQ,kBAAkBvC,EAAKkC,OAAOF,OAAQ/B,EAASoB,EAAQE,EAAS,GAC3EiB,EAAmB,IAAIC,UAAUV,EAAMV,EAAOE,GACpDxB,EAAI2C,aAAaF,EAAkB,EAAG,GACtC,IAAIG,GAAO,KAAQvB,EAAOlB,IAAW0C,QAAQ,GAC7C1C,EAAWkB,EACXF,QAAQC,IAAIwB,GAGpBE,sBAAsBhC,GAnC9B,IAAiBiB,EAAqBG,KAgEvC,CAACrC,EAAOF,IAIP,gCACI,wBAAQoD,IAAKpD,EAAb,eACA,uBAAOqD,UAAWC,IAAIC,KAAMC,UAAU,EAAMJ,IAAKlD,QChE9CuD,MAnBf,WAKE,OACE,qBAAKJ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKK,IAAKC,EAAMN,UAAU,WAAWO,IAAI,SACzC,kDACmB,wCADnB,QACyC,2CAGvC,cAAC,EAAD,UCNKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrD,MAAK,YAAkD,IAA/CsD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.68b055e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"cam_hide__3ofNy\"};","export default __webpack_public_path__ + \"static/media/WebAssembly_Logo.1381587b.svg\";","import {useEffect, useRef} from \"react\";\nimport css from './cam.module.css'\n\nfunction Cam() {\n    let canvas = useRef<HTMLCanvasElement>(null)\n    let video = useRef<HTMLVideoElement>(null)\n\n\n    useEffect(() => {\n        if (canvas === null) return;\n        if (video.current === null) return;\n\n        let ctx: CanvasRenderingContext2D | null,\n            // @ts-ignore\n            wasm,\n            pointer = -1,\n            lastTime = Infinity;\n\n        function memcopy(b1: ArrayBufferLike, b2: SharedArrayBuffer, offset: number) {\n            new Uint8Array(b2, offset, b1.byteLength).set(new Uint8Array(b1));\n        }\n\n        function drawToCanvas(time: number) {\n            if (video.current && canvas.current) {\n                const width = video.current.videoWidth;\n                const height = video.current.videoHeight;\n                canvas.current.width = width;\n                canvas.current.height = height;\n\n                ctx?.drawImage(video.current, 0, 0, width, height);\n\n                if (canvas.current.width > 0) {\n                    if (canvas.current && pointer === -1) {\n                        canvas.current.width = width;\n                        canvas.current.height = height;\n                        const byteSize = width * height * 4;\n                        // @ts-ignore\n                        pointer = wasm.alloc(byteSize);\n                    } else if (canvas.current && ctx) {\n                        let imageData = ctx.getImageData(0, 0, width, height);\n                        //@ts-ignore\n                        memcopy(imageData.data.buffer, wasm.memory.buffer, pointer)\n                        //@ts-ignore\n                        wasm.sobel(pointer, width, height)\n                        //@ts-ignore\n                        const data = new Uint8ClampedArray(wasm.memory.buffer, pointer, width * height * 4);\n                        const imageDataUpdated = new ImageData(data, width, height);\n                        ctx.putImageData(imageDataUpdated, 0, 0)\n                        let fps = (1000 / (time - lastTime)).toFixed(2);\n                        lastTime = time;\n                        console.log(fps)\n                    }\n                }\n                requestAnimationFrame(drawToCanvas)\n            }\n        }\n\n        import('../wasm')\n            .then(native => {\n                wasm = native;\n                //@ts-ignore\n                native.greet()\n\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({ video: true })\n                        .then(function (stream) {\n                            if (canvas.current !== null) {\n                                ctx = canvas.current.getContext('2d');\n                            }\n                            if (video.current) {\n                                video.current.srcObject = stream;\n                            }\n\n                            drawToCanvas(new Date().getTime())\n                        })\n                        .catch(function (err0r) {\n                            console.log(\"Something went wrong!\");\n                        });\n                }\n            })\n\n\n    }, [video, canvas])\n\n\n    return (\n        <div>\n            <canvas ref={canvas} > </canvas>\n            <video className={css.hide} autoPlay={true} ref={video} />\n        </div>\n    );\n}\n\nexport default Cam;\n","import logo from './WebAssembly_Logo.svg';\nimport './App.css';\nimport {useEffect} from \"react\";\nimport Cam from \"./cam\";\n\nfunction App() {\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Cam effects with <code>wasm</code> and <code>rust</code>\n        </p>\n\n          <Cam />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}