{"version":3,"sources":["cam/cam.module.css","WebAssembly_Logo.svg","cam/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["module","exports","Cam","canvas","useRef","video","sobelButton","boxBlurButton","sharpenButton","embossButton","useEffect","current","effect","addEventListener","ctx","wasm","pointer","lastTime","Infinity","ticks","then","native","navigator","mediaDevices","getUserMedia","stream","getContext","srcObject","drawToCanvas","Date","getTime","catch","err0r","console","log","time","width","videoWidth","height","videoHeight","document","querySelector","innerHTML","toFixed","byteSize","alloc","requestAnimationFrame","drawImage","imageData","getImageData","b1","data","buffer","b2","memory","Uint8Array","byteLength","set","sobel","box_blur","sharpen","emboss","Uint8ClampedArray","imageDataUpdated","ImageData","putImageData","className","css","flex","sideDiv","buttonList","ref","hide","autoPlay","App","src","logo","alt","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.651319e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"cam_hide__3ofNy\",\"flex\":\"cam_flex__22L5-\",\"sideDiv\":\"cam_sideDiv__1_1lG\",\"buttonList\":\"cam_buttonList__TsgiK\"};","export default __webpack_public_path__ + \"static/media/WebAssembly_Logo.1381587b.svg\";","import {useEffect, useRef} from \"react\";\nimport css from './cam.module.css'\n\nfunction Cam() {\n    let canvas = useRef<HTMLCanvasElement>(null)\n    let video = useRef<HTMLVideoElement>(null)\n    let sobelButton = useRef<HTMLButtonElement>(null)\n    let boxBlurButton = useRef<HTMLButtonElement>(null)\n    let sharpenButton = useRef<HTMLButtonElement>(null)\n    let embossButton = useRef<HTMLButtonElement>(null)\n\n\n    useEffect(() => {\n        if (canvas === null) return;\n        if (video.current === null) return;\n        if (sobelButton.current === null) return;\n        if (boxBlurButton.current === null) return;\n        if (sharpenButton.current === null) return;\n        if (embossButton.current === null) return;\n\n        let effect = 0;\n\n        sobelButton.current.addEventListener(\"click\", () => {\n            effect = effect === 1 ? 0 : 1\n        })\n\n        boxBlurButton.current.addEventListener(\"click\", () => {\n            effect = effect === 2 ? 0 : 2\n        })\n\n        sharpenButton.current.addEventListener(\"click\", () => {\n            effect = effect === 3 ? 0 : 3\n        })\n\n        embossButton.current.addEventListener(\"click\", () => {\n            effect = effect === 4 ? 0 : 4\n        })\n\n        let ctx: CanvasRenderingContext2D | null,\n            // @ts-ignore\n            wasm,\n            pointer = -1,\n            lastTime = Infinity,\n            ticks = 0;\n\n        function memcopy(b1: ArrayBufferLike, b2: SharedArrayBuffer, offset: number) {\n            new Uint8Array(b2, offset, b1.byteLength).set(new Uint8Array(b1));\n        }\n\n        function drawToCanvas(time: number) {\n            if (video.current && canvas.current) {\n                const width = video.current.videoWidth;\n                const height = video.current.videoHeight;\n                canvas.current.width = width;\n                canvas.current.height = height;\n\n                if (ticks % 5 === 0) {\n                    //@ts-ignore\n                    document.querySelector(\"#fps\").innerHTML = (1000 / (time - lastTime)).toFixed(2);\n                }\n                ticks += 1;\n                if (ticks > 5) ticks = 0;\n                lastTime = time;\n\n                if (canvas.current.width > 0 && canvas.current && pointer === -1) {\n                    canvas.current.width = width;\n                    canvas.current.height = height;\n                    const byteSize = width * height * 4;\n                    // @ts-ignore\n                    pointer = wasm.alloc(byteSize);\n                    return requestAnimationFrame(drawToCanvas)\n                }\n\n                ctx?.drawImage(video.current, 0, 0, width, height);\n                if (effect === 0) return requestAnimationFrame(drawToCanvas);\n\n\n                if (canvas.current.width > 0 && canvas.current && ctx) {\n                    let imageData = ctx.getImageData(0, 0, width, height);\n                    //@ts-ignore\n                    memcopy(imageData.data.buffer, wasm.memory.buffer, pointer)\n                    switch (effect) {\n                        case 1:\n                            //@ts-ignore\n                            wasm.sobel(pointer, width, height)\n                            break;\n                        case 2:\n                            //@ts-ignore\n                            wasm.box_blur(pointer, width, height)\n                            break;\n                        case 3:\n                            //@ts-ignore\n                            wasm.sharpen(pointer, width, height)\n                            break;\n                        case 4:\n                            //@ts-ignore\n                            wasm.emboss(pointer, width, height)\n                            break;\n                    }\n\n                    //@ts-ignore\n                    const data = new Uint8ClampedArray(wasm.memory.buffer, pointer, width * height * 4);\n                    const imageDataUpdated = new ImageData(data, width, height);\n                    ctx.putImageData(imageDataUpdated, 0, 0)\n                }\n                requestAnimationFrame(drawToCanvas)\n            }\n        }\n\n        import('../wasm')\n            .then(native => {\n                wasm = native;\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({ video: true })\n                        .then(function (stream) {\n                            if (canvas.current !== null) {\n                                ctx = canvas.current.getContext('2d');\n                            }\n                            if (video.current) {\n                                video.current.srcObject = stream;\n                            }\n\n                            drawToCanvas(new Date().getTime())\n                        })\n                        .catch(function (err0r) {\n                            console.log(\"Something went wrong!\");\n                        });\n                }\n            })\n    }, [sobelButton, video, canvas])\n\n    return (\n        <div className={css.flex}>\n            <div className={css.sideDiv}>\n                <ul className={css.buttonList}>\n                    <li><button ref={sobelButton}>Sobel Edge Detection</button></li>\n                    <li><button ref={boxBlurButton}>Box Blur</button></li>\n                    <li><button ref={sharpenButton}>Sharpen</button></li>\n                    <li><button ref={embossButton}>Emboss</button></li>\n                </ul>\n            </div>\n            <canvas ref={canvas} > </canvas>\n            <video className={css.hide} autoPlay={true} ref={video} />\n            <div className={css.sideDiv}></div>\n        </div>\n    );\n}\n\nexport default Cam;\n","import logo from './WebAssembly_Logo.svg';\nimport './App.css';\nimport {useEffect} from \"react\";\nimport Cam from \"./cam\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Cam effects with <code>wasm</code> and <code>rust</code> <span id={\"fps\"}></span>fps\n        </p>\n\n          <Cam />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}